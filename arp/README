usage: arp.argparse.py [-h] [-i IFACE] [-n NETWORK]

optional arguments:
  -h, --help  show this help message and exit
  -i IFACE    force the interface
  -n NETWORK  force the network ex: 192.168.2.0/24



Needs Python2.7(argparse is not on 2.5) scapy, tcpdump .. amoung other things 
these scripts also work on the nokia n900 (need to install tcpdump and scapy on the n900 though)
dont bother with arp.py or arp.auto.py    , arp.argparse.py allows for both auto, and manuel modes

	pronto@amd ~/git/random-scripts/arp $ sudo ./arp.argparse.py 
	AUTO
	AUTO
	network/cidr: 192.168.2.0/24
	intface: eth0
	Begin emission:
	**Finished to send 256 packets.
	.**......................
	Received 27 packets, got 4 answers, remaining 252 packets
	192.168.2.1      00:0c:41:d0:be:a1              Cisco-Li
	192.168.2.179    00:17:31:9b:ca:ef              AsustekC
	192.168.2.109    1c:4b:d6:86:2a:cf              Azurewav
	192.168.2.115    ec:9b:5b:d3:93:cc              Nokia
	total boxes: 4

i could of done the same thing with:  ./arp.argparse.py -i eth0 -n 192.168.2.0/24
use the switches when what you want to scan is differnt from the first entry in route
	$ route
	Kernel IP routing table
	Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
	192.168.2.0     *               255.255.255.0   U     0      0        0 eth0
	default         192.168.2.1     0.0.0.0         UG    0      0        0 eth0








